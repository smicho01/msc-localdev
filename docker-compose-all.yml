x-healthcheck-settings: &healthcheck-settings
  interval: 10s
  retries: 10
  start_period: 15s
  timeout: 5s

x-db-env-conf: &db-env
  DATABASE_NAME: ${POSTGRESDB}
  DATABASE_USERNAME: ${POSTGRESUSER}
  DATABASE_PASSWORD: ${POSTGRESPASSWORD}
  DATABASE_ENDPOINT: postgres
  DATABASE_PORT: 5432

x-db-schema-creation: &db-schema-creation
  image: postgres:13.1
  volumes:
    - ./sql:/sql
  environment:
    <<: *db-env
  entrypoint: ["/sql/create-schema.sh"]
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - msc

services:
  postgres:
    image: postgres:13.1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRESPASSWORD}
      - POSTGRES_USER=${POSTGRESUSER}
      - POSTGRES_DB=${POSTGRESDB}
    networks:
      - msc
    healthcheck:
      test: ["CMD", "psql", "-U", "${POSTGRESUSER}", "-d", "${POSTGRESDB}"]
      interval: 500ms
      timeout: 1s
      retries: 5
    volumes:
      - dbdata:/var/lib/postgresql/data


  # Create DB schemas
  user-schema-creation:
    <<: *db-schema-creation
    command: ["users"]

  items-schema-creation:
    <<: *db-schema-creation
    command: ["items"]

  uilogs-schema-creation:
    <<: *db-schema-creation
    command: ["uilogs"]

  core-schema-creation:
    <<: *db-schema-creation
    command: ["core"]

    
  # DB migrations
  users-database-migrations:
    image: sever3d/academichain-user-database
    pull_policy: always
    command:
      - "--url=jdbc:postgresql://${POSTGRESHOST}:5432/${POSTGRESDB}"
      - "--username=${POSTGRESUSER}"
      - "--password=${POSTGRESPASSWORD}"
      - "--changeLogFile=changelog/db.changelog-main.yml"
      - "--liquibaseSchemaName=users"
      - "update"
    depends_on:
      - user-schema-creation
    networks:
      - msc

  items-database-migrations:
    image: sever3d/academichain-item-database
    pull_policy: always
    command:
      - "--url=jdbc:postgresql://${POSTGRESHOST}:5432/${POSTGRESDB}"
      - "--username=${POSTGRESUSER}"
      - "--password=${POSTGRESPASSWORD}"
      - "--changeLogFile=changelog/db.changelog-main.yml"
      - "--liquibaseSchemaName=items"
      - "update"
    depends_on:
      - items-schema-creation
    networks:
      - msc

  core-database-migrations:
    image: sever3d/academichain-core-database
    pull_policy: always
    command:
      - "--url=jdbc:postgresql://${POSTGRESHOST}:5432/${POSTGRESDB}"
      - "--username=${POSTGRESUSER}"
      - "--password=${POSTGRESPASSWORD}"
      - "--changeLogFile=changelog/db.changelog-main.yml"
      - "--liquibaseSchemaName=core"
      - "update"
    depends_on:
      - core-schema-creation
    networks:
      - msc

  ui-database-migrations:
    image: sever3d/academichain-ui-database
    pull_policy: always
    command:
      - "--url=jdbc:postgresql://${POSTGRESHOST}:5432/${POSTGRESDB}"
      - "--username=${POSTGRESUSER}"
      - "--password=${POSTGRESPASSWORD}"
      - "--changeLogFile=changelog/db.changelog-main.yml"
      - "--liquibaseSchemaName=uilogs"
      - "update"
    depends_on:
      - uilogs-schema-creation
    networks:
      - msc

  # Services
  academi-core-service:
    image: sever3d/academichain-core-service
    pull_policy: always
    ports:
      - "9090:9090"
    environment:
      - POSTGRESHOST=${POSTGRESHOST}
      - POSTGRESUSER=${POSTGRESUSER}
      - POSTGRESPASSWORD=${POSTGRESPASSWORD}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - ITEM_SERVICE_URL=${ITEM_SERVICE_URL}
      - KEYCLOAK_URL=${KEYCLOAK_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - KEYCLOAK_SECRET=${KEYCLOAK_SECRET}
      - BLOCKCHAIN_API_SECRET=${BLOCKCHAIN_API_SECRET}
    depends_on:
      - core-database-migrations
    networks:
      - msc

  academi-user-service:
    image: sever3d/academichain-user-service
    pull_policy: always
    ports:
      - "9091:9091"
    environment:
      - POSTGRESHOST=${POSTGRESHOST}
      - POSTGRESUSER=${POSTGRESUSER}
      - POSTGRESPASSWORD=${POSTGRESPASSWORD}
      - CORE_SERVICE_URL=${CORE_SERVICE_URL}
      - ITEM_SERVICE_URL=${ITEM_SERVICE_URL}
      - KEYCLOAK_URL=${KEYCLOAK_URL}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      - users-database-migrations
    networks:
      - msc

  academi-item-service:
    image: sever3d/academichain-item-service
    pull_policy: always
    ports:
      - "9092:9092"
    environment:
      - POSTGRESHOST=${POSTGRESHOST}
      - POSTGRESUSER=${POSTGRESUSER}
      - POSTGRESPASSWORD=${POSTGRESPASSWORD}
      - CORE_SERVICE_URL=${CORE_SERVICE_URL}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - KEYCLOAK_URL=${KEYCLOAK_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}

    depends_on:
      - items-database-migrations
    networks:
      - msc

  academi-ui:
    image: sever3d/academichain-ui
    pull_policy: always
    ports:
      - "80:80"
    environment:
      - ACADEMICHAIN_ENV=${ACADEMICHAIN_ENV}
      - POSTGRESHOST=${POSTGRESHOST}
      - POSTGRESPORT=${POSTGRESPORT}
      - POSTGRESDBNAME=${POSTGRESDB}
      - POSTGRESUSER=${POSTGRESUSER}
      - POSTGRESPASSWORD=${POSTGRESPASSWORD}
      - CORE_SERVICE_URI=${CORE_SERVICE_URL_UI}
      - USER_SERVICE_URI=${USER_SERVICE_URL_UI}
      - ITEM_SERVICE_URI=${ITEM_SERVICE_URL_UI}
      - NLP_SERVICE_URI=${NLP_SERVICE_URI}
      - NLP_SERVICE_TOKEN=${NLP_SERVICE_TOKEN}
      - REDIS_URL=${REDIS_URL}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - KEYCLOAK_AUTH_URL=${KEYCLOAK_AUTH_URL}
    depends_on:
      - ui-database-migrations
    networks:
      - msc


volumes:
  dbdata:
    driver: local

networks:
  msc:
    driver: bridge